substitutions:
  name: tagreader
  friendly_name: Tag Reader

packages:
  adonno.tag_reader: github://adonno/tag_reader/tagreader.yaml #@v4.0.0

esphome:
  project:
    version: "1.4-jfg"
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    # - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - light.turn_on:
        id: activity_led
        brightness: 100%
        red: 0%
        green: 0%
        blue: 100%
        flash_length: 500ms
    - switch.turn_off: buzzer_enabled
    - switch.turn_on: led_enabled

switch:
- id: !extend buzzer_enabled
  restore_mode: ALWAYS_OFF

pn532_i2c:
  on_tag:
    then:
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            red: 0%
            green: 100%
            blue: 0%
            flash_length: 500ms
    
    - delay: 0.15s #to fix slow component
        
    - lambda: !lambda |-
        id(source)="";
        id(url)="";
        id(info)="";
        if (tag.has_ndef_message()) {
          auto message = tag.get_ndef_message();
          auto records = message->get_records();
          for (auto &record : records) {
            std::string payload = record->get_payload();
            std::string type = record->get_type();
            size_t hass = payload.find("https://www.home-assistant.io/tag/");
            size_t applemusic = payload.find("https://music.apple.com");
            size_t spotify = payload.find("https://open.spotify.com");
            size_t musicurl = payload.find("https://");
            size_t sonos = payload.find("sonos-2://");

            bool isaudioext = false;
            if (type == "U" and payload.length() > 4 ) {
              size_t mp3 = payload.find(".mp3");
              size_t aac = payload.find(".aac");
              size_t flac = payload.find(".flac");
              size_t mp4 = payload.find(".mp4");
              if (mp3 != std::string::npos || aac != std::string::npos || flac != std::string::npos || mp4 != std::string::npos) {
                isaudioext = true;
              }
            }

            if (type == "U" and hass != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Home Assistant tag NDEF");
              id(source)="hass";
              id(url)=payload;
              id(info)=payload.substr(hass + 34);
            }
            else if (type == "U" and applemusic != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Apple Music tag NDEF");
              id(source)="amusic";
              id(url)=payload;
            }
            else if (type == "U" and spotify != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Spotify tag NDEF");
              id(source)="spotify";
              id(url)=payload;
            }
            else if (type == "U" and sonos != std::string::npos ) {
              ESP_LOGD("tagreader", "Found Sonos app tag NDEF");
              id(source)="sonos";
              id(url)=payload;
            }
            else if (type == "U" and musicurl != std::string::npos and isaudioext ) {
              ESP_LOGD("tagreader", "Found Music File URL tag NDEF");
              id(source)="musicurl";
              id(url)=payload;
            }
            else if (type == "T" ) {
              ESP_LOGD("tagreader", "Found music info tag NDEF");
              id(info)=payload;
            }
            else if ( id(source)=="" ) {
              id(source)="uid";
            }
          }
        }
        else {
          id(source)="uid";
        }
    
    - if:
        condition:
          lambda: 'return ( id(source)=="uid" );'
        then:
          - homeassistant.tag_scanned: !lambda |-
              ESP_LOGD("tagreader", "No HA NDEF, using UID");
              return x;
        else:
        - if:
            condition:
              lambda: 'return ( id(source)=="hass" );'
            then:
            - homeassistant.tag_scanned: !lambda 'return id(info);'
            else:
            - homeassistant.event:
                event: esphome.music_tag
                data:
                  reader: !lambda |-
                    return App.get_name().c_str();
                  source: !lambda |-
                    return id(source);
                  url: !lambda |-
                    return id(url);
                  info: !lambda |-
                    return id(info);
    
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
          - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
